{"list":[null,"色调变更","色相","模糊","外发光"],"data":{"1":{"id":1,"blockList":[{"name":"通常块","blockAttrs":[{"attr":{"id":"48222695831_0.13640045582745652","varName":"r","varType":0,"compData":{"compType":1,"compParam":{"minLimit":-1,"maxLimit":1,"tickValue":0.01,"limitInteger":false,"lockTextLimit":true}},"defaultValue":"0","hideMode":false,"useCommand":false,"onlyPointTo":false,"moduleID":1,"dataStructureID":1,"arrayMode":false,"arrayLength":100,"arrayAllowDelete":false,"arrayAllowSwap":false,"arrayAllowUpdate":false,"accessMode":1,"syncMode":0,"attrTips":"","alias":"红","onlyConfig":false,"preview":false,"autoTitleWidth":false,"titleWidth":40,"eyeShow":true,"lockBlock":false},"attrConditions":[],"y":5,"x":5,"width":200,"height":32},{"attr":{"id":"48223752901_0.17743614851066658","varName":"g","varType":0,"compData":{"compType":1,"compParam":{"minLimit":-1,"maxLimit":1,"tickValue":0.01,"limitInteger":false,"lockTextLimit":true}},"defaultValue":"0","hideMode":false,"useCommand":false,"onlyPointTo":false,"moduleID":1,"dataStructureID":1,"arrayMode":false,"arrayLength":100,"arrayAllowDelete":false,"arrayAllowSwap":false,"arrayAllowUpdate":false,"accessMode":1,"syncMode":0,"attrTips":"","alias":"绿","onlyConfig":false,"preview":false,"autoTitleWidth":false,"titleWidth":40,"eyeShow":true,"lockBlock":false},"attrConditions":[],"y":37,"x":5,"width":200,"height":32},{"attr":{"id":"48223754226_0.9837919627276777","varName":"b","varType":0,"compData":{"compType":1,"compParam":{"minLimit":-1,"maxLimit":1,"tickValue":0.01,"limitInteger":false,"lockTextLimit":true}},"defaultValue":"0","hideMode":false,"useCommand":false,"onlyPointTo":false,"moduleID":1,"dataStructureID":1,"arrayMode":false,"arrayLength":100,"arrayAllowDelete":false,"arrayAllowSwap":false,"arrayAllowUpdate":false,"accessMode":1,"syncMode":0,"attrTips":"","alias":"蓝","onlyConfig":false,"preview":false,"autoTitleWidth":false,"titleWidth":40,"eyeShow":true,"lockBlock":false},"attrConditions":[],"y":70,"x":5,"width":200,"height":32},{"attr":{"id":"48223831099_0.4299841888863982","varName":"gray","varType":0,"compData":{"compType":1,"compParam":{"minLimit":-1,"maxLimit":1,"tickValue":0.01,"limitInteger":false,"lockTextLimit":true}},"defaultValue":"0","hideMode":false,"useCommand":false,"onlyPointTo":false,"moduleID":1,"dataStructureID":1,"arrayMode":false,"arrayLength":100,"arrayAllowDelete":false,"arrayAllowSwap":false,"arrayAllowUpdate":false,"accessMode":1,"syncMode":0,"attrTips":"","alias":"灰度","onlyConfig":false,"preview":false,"autoTitleWidth":false,"titleWidth":40,"eyeShow":true,"lockBlock":false},"attrConditions":[],"y":103,"x":5,"width":200,"height":32},{"attr":{"id":"48223845663_0.19096109674074535","varName":"mr","varType":0,"compData":{"compType":1,"compParam":{"minLimit":0,"maxLimit":5,"tickValue":0.01,"limitInteger":false,"lockTextLimit":false}},"defaultValue":"1","hideMode":false,"useCommand":false,"onlyPointTo":false,"moduleID":1,"dataStructureID":1,"arrayMode":false,"arrayLength":100,"arrayAllowDelete":false,"arrayAllowSwap":false,"arrayAllowUpdate":false,"accessMode":1,"syncMode":0,"attrTips":"","alias":"红曝光","onlyConfig":false,"preview":false,"autoTitleWidth":false,"titleWidth":40,"eyeShow":true,"lockBlock":false},"attrConditions":[],"y":141,"x":3,"width":243,"height":32},{"attr":{"id":"48223992872_0.9352469640932077","varName":"mg","varType":0,"compData":{"compType":1,"compParam":{"minLimit":0,"maxLimit":5,"tickValue":0.01,"limitInteger":false,"lockTextLimit":false}},"defaultValue":"1","hideMode":false,"useCommand":false,"onlyPointTo":false,"moduleID":1,"dataStructureID":1,"arrayMode":false,"arrayLength":100,"arrayAllowDelete":false,"arrayAllowSwap":false,"arrayAllowUpdate":false,"accessMode":1,"syncMode":0,"attrTips":"","alias":"绿曝光","onlyConfig":false,"preview":false,"autoTitleWidth":false,"titleWidth":40,"eyeShow":true,"lockBlock":false},"attrConditions":[],"y":178,"x":4,"width":243,"height":32},{"attr":{"id":"48224002466_0.011990835230399899","varName":"mb","varType":0,"compData":{"compType":1,"compParam":{"minLimit":0,"maxLimit":5,"tickValue":0.01,"limitInteger":false,"lockTextLimit":false}},"defaultValue":"1","hideMode":false,"useCommand":false,"onlyPointTo":false,"moduleID":1,"dataStructureID":1,"arrayMode":false,"arrayLength":100,"arrayAllowDelete":false,"arrayAllowSwap":false,"arrayAllowUpdate":false,"accessMode":1,"syncMode":0,"attrTips":"","alias":"蓝曝光","onlyConfig":false,"preview":false,"autoTitleWidth":false,"titleWidth":40,"eyeShow":true,"lockBlock":false},"attrConditions":[],"y":214,"x":4,"width":243,"height":32}],"blockCondition":[],"blockHeight":361,"autoOrder":true}],"customShader":"//======================================================================================================\n// SYSTEM START 该段注释由系统自动生成，请勿删改\n//======================================================================================================\n//------------------------------------------------------------------------------------------------------\n// 固定参数\n//------------------------------------------------------------------------------------------------------\n// varying vec2 v_texcoord; //  原始贴图UV坐标\n// uniform sampler2D texture; // 原始贴图\n// uniform float alpha; // 当前对象的透明度\n//------------------------------------------------------------------------------------------------------\n// 该材质的自定义参数 判定该变量存在的宏：MU材质编号_变量名称\n//------------------------------------------------------------------------------------------------------\n// uniform float mu1_r; // MU1_r 红\n// uniform float mu1_g; // MU1_g 绿\n// uniform float mu1_b; // MU1_b 蓝\n// uniform float mu1_gray; // MU1_gray 灰度\n// uniform float mu1_mr; // MU1_mr 红曝光\n// uniform float mu1_mg; // MU1_mg 绿曝光\n// uniform float mu1_mb; // MU1_mb 蓝曝光\n//------------------------------------------------------------------------------------------------------\n// shader 代码规则：\n// 1.由于多材质合并shader代码运行，函数名必须以mf${材质ID}_开头以避免函数名称冲突，如 mf1_myFunc\n// 2.入口函数vec4 mf${材质ID}_main 如 vec4 mf1_main(){return gl_FragColor;}\n// 3.原图采样：vec4 color = getTextureColor(v_texcoord);\n// 4.关于自定义贴图的坐标信息：自定义贴图可能是图集中的一部分，提供了相关信息（mu材质编号_变量名_UVInfo）\n//   相对于0~1的坐标系提供了图集的映射信息 vec4 [UV宽度缩放比例, UV高度缩放比例, UV水平偏移量, UV垂直偏移量]\n// 5.变量宏（可用于判定该变量是否满足出现条件）：#ifdef MU材质编号_变量名称、#else、#endif\n// 6.系统宏 IN_GC_EDITOR=是否在编辑器中运行\n// 7.语法：C语言 更多资料请参考GLSL Shader\n//======================================================================================================\n// SYSTEM END\n//======================================================================================================\nvec4 mf1_main() {\n   float rt1 = 1.0 - (0.6914) * mu1_gray;\n   float gt1 = 1.0 - (0.3906) * mu1_gray;\n   float bt1 = 1.0 - (0.9180) * mu1_gray;\n   float rt0 = 0.3086 * mu1_gray;\n   float gt0 = 0.6094 * mu1_gray;\n   float bt0 = 0.0820 * mu1_gray;\n   mat4 alphaMat = mat4(\n        rt1 * mu1_mr, gt0, bt0, mu1_r, \n        rt0, gt1 * mu1_mg, bt0, mu1_g,\n        rt0, gt0, bt1*mu1_mb, mu1_b,\n        0.0, 0.0, 0.0, 1.0\n   );\n   gl_FragColor *= alphaMat;\n   gl_FragColor.r += mu1_r*(mu1_r<0.0?gl_FragColor.r:1.0);\n   gl_FragColor.g += mu1_g*(mu1_g<0.0?gl_FragColor.g:1.0);\n   gl_FragColor.b += mu1_b*(mu1_b<0.0?gl_FragColor.b:1.0);\n   return gl_FragColor;\n  \n}","customPreShaderClacTS":"//------------------------------------------------------------------------------------------------------\n// 此处可以编写需要经过Typescript/Javascript代码预先计算再传递的额外Shader uniform\n// 可视化制作的自定义变量会自动进行转化为Shader中可用的uniform，此处是用于修改或新增计算后的参数进行传递\n// -- shader 中可以获得或修改即将传递给Shader使用的对应变量的值（类型要保持不变），比如 shader.mu3_xxx\n// -- 新增加属性：\n//    1.直接在此处编写：shader[\"mu材质编号_自定义变量名称\"] 如 shader[\"mu3_abc\"] = 5;\n//    2.在Shader代码中需要自己输入增加的，如 uniform float mu3_abc;\n// -- 如果需要缓存计算结果可以自行根据键值对进行缓存，以便减少计算量来提升性能 如 this[\"xxxx\"] = 计算后的结果;\n// 【Typescript 与 GLSL 中变量映射】\n// -- number             => uniform float\n// -- number[]           => uniform vec2/vec3/vec4  根据ts中数值数组的长度决定\n// -- Float32Array(16)   => uniform mat4  按顺序对应4x4矩阵数据\n//------------------------------------------------------------------------------------------------------","customPreShaderClacJS":"","shaderSize":false},"2":{"id":2,"blockList":[{"name":"未命名块","blockAttrs":[{"attr":{"id":"47731136556_0.7744923850502541","varName":"hue","varType":0,"compData":{"compType":1,"compParam":{"lowerLimit":0,"upperLimit":1000,"stepValue":0.01,"limitInteger":true,"lockTextLimit":true,"xDragEnabled":true,"yDragEnabled":true,"minLimit":-180,"maxLimit":180,"tickValue":1}},"defaultValue":"0","hideMode":false,"useCommand":false,"onlyPointTo":false,"moduleID":1,"dataStructureID":1,"arrayMode":false,"arrayLength":100,"arrayAllowDelete":false,"arrayAllowSwap":false,"arrayAllowUpdate":false,"accessMode":1,"syncMode":0,"attrTips":"","alias":"色相","onlyConfig":false,"preview":false,"autoTitleWidth":true,"titleWidth":100,"eyeShow":true,"lockBlock":false},"attrConditions":[],"y":11,"x":10,"width":237,"height":32}],"blockCondition":[],"blockHeight":345,"autoOrder":true}],"customShader":"//======================================================================================================\n// SYSTEM START 该段注释由系统自动生成，请勿删改\n//======================================================================================================\n//------------------------------------------------------------------------------------------------------\n// 固定参数\n//------------------------------------------------------------------------------------------------------\n// varying vec2 v_texcoord; //  原始贴图UV坐标\n// uniform sampler2D texture; // 原始贴图\n// uniform float alpha; // 当前对象的透明度\n//------------------------------------------------------------------------------------------------------\n// 该材质的自定义参数 判定该变量存在的宏：MU材质编号_变量名称\n//------------------------------------------------------------------------------------------------------\n// uniform float mu2_hue; // MU2_hue 色相\n//------------------------------------------------------------------------------------------------------\n// shader 代码规则：\n// 1.由于多材质合并shader代码运行，函数名必须以mf${材质ID}_开头以避免函数名称冲突，如 mf2_myFunc\n// 2.入口函数vec4 mf${材质ID}_main 如 vec4 mf2_main(){return gl_FragColor;}\n// 3.原图采样：vec4 color = getTextureColor(v_texcoord);\n// 4.关于自定义贴图的坐标信息：自定义贴图可能是图集中的一部分，提供了相关信息（mu材质编号_变量名_UVInfo）\n//   相对于0~1的坐标系提供了图集的映射信息 vec4 [UV宽度缩放比例, UV高度缩放比例, UV水平偏移量, UV垂直偏移量]\n// 5.变量宏（可用于判定该变量是否满足出现条件）：#ifdef MU材质编号_变量名称、#else、#endif\n// 6.系统宏 IN_GC_EDITOR=是否在编辑器中运行\n// 7.语法：C语言 更多资料请参考GLSL Shader\n//======================================================================================================\n// SYSTEM END\n//======================================================================================================\nuniform mat4 hueColorMat4;\nvec4 mf2_main(){\n   float lastDr = hueColorMat4[0][3];\n   float lastDg = hueColorMat4[1][3];\n   float lastDb = hueColorMat4[2][3];\n   gl_FragColor *= hueColorMat4;\n   gl_FragColor.r += lastDr*(lastDr<0.0?gl_FragColor.r:1.0);\n   gl_FragColor.g += lastDg*(lastDg<0.0?gl_FragColor.g:1.0);\n   gl_FragColor.b += lastDb*(lastDb<0.0?gl_FragColor.b:1.0);\n   return gl_FragColor;\n}","customPreShaderClacTS":"//------------------------------------------------------------------------------------------------------\n// 此处可以编写需要经过客户端代码预先计算再传递的额外Shader uniform（通常情况下是逐帧调用该段代码）\n// 可视化制作的自定义变量会自动进行转化为Shader中可用的uniform，此处是用于修改或新增计算后的参数进行传递\n// -- sp 可获取使用该材质的显示对象（GameSprite）\n// -- shader 可获得或修改即将传递给Shader使用的对应变量的值（类型要保持不变），比如 shader.mu3_xxx\n// -- 新增加属性：\n//    1.直接在此处编写：shader[\"mu材质编号_自定义变量名称\"] 如 shader[\"mu3_abc\"] = 5;\n//    2.在Shader代码中需要自己输入增加的，如 uniform float mu3_abc;\n// -- 如果需要缓存计算结果可以自行根据键值对进行缓存，以便减少计算量来提升性能 如 this[\"xxxx\"] = 计算后的结果;\n// 【Typescript 与 GLSL 中变量映射】\n// -- number             => uniform float\n// -- number[]           => uniform vec2/vec3/vec4  根据ts中数值数组的长度决定\n// -- Float32Array(16)   => uniform mat4  按顺序对应4x4矩阵数据\n//------------------------------------------------------------------------------------------------------\nvar hueUniformName = \"hueColorMat4\";\nvar cacheKey = \"__hueValue\";\nvar huaValue = this[cacheKey];\nif (!huaValue || huaValue[0] != shader.mu2_hue) {\n    var hueColorMat4 = shader[hueUniformName] = new Float32Array(16);\n    var hueF = new HueFilter(shader.mu2_hue);\n    var colorMat = hueF.colorMat;\n    var j = 0;\n    for (var i = 0; i < 20; i++) {\n        if (i % 5 != 4) {\n            hueColorMat4[j++] = colorMat[i];\n        }\n    }\n    this[cacheKey] = [shader.mu2_hue, hueColorMat4];\n}\nelse{\n    shader[hueUniformName] = huaValue[1];\n}","customPreShaderClacJS":"var hueUniformName = \"hueColorMat4\";\nvar cacheKey = \"__hueValue\";\nvar huaValue = this[cacheKey];\nif (!huaValue || huaValue[0] != shader.mu2_hue) {\n    var hueColorMat4 = shader[hueUniformName] = new Float32Array(16);\n    var hueF = new HueFilter(shader.mu2_hue);\n    var colorMat = hueF.colorMat;\n    var j = 0;\n    for (var i = 0; i < 20; i++) {\n        if (i % 5 != 4) {\n            hueColorMat4[j++] = colorMat[i];\n        }\n    }\n    this[cacheKey] = [shader.mu2_hue, hueColorMat4];\n}\nelse {\n    shader[hueUniformName] = huaValue[1];\n}\n","name":"色相","shaderSize":false},"3":{"id":3,"blockList":[{"name":"未命名块","blockAttrs":[{"attr":{"id":"48163992238_0.7871281715435372","varName":"strength","varType":0,"compData":{"compType":1,"compParam":{"lowerLimit":0,"upperLimit":1000,"stepValue":0.01,"limitInteger":false,"lockTextLimit":false,"xDragEnabled":true,"yDragEnabled":true,"minLimit":0,"maxLimit":10,"tickValue":0.01}},"defaultValue":"0","hideMode":false,"useCommand":false,"onlyPointTo":false,"moduleID":1,"dataStructureID":1,"arrayMode":false,"arrayLength":100,"arrayAllowDelete":false,"arrayAllowSwap":false,"arrayAllowUpdate":false,"accessMode":1,"syncMode":0,"attrTips":"","alias":"强度","onlyConfig":false,"preview":false,"autoTitleWidth":true,"titleWidth":100,"eyeShow":true,"lockBlock":false},"attrConditions":[],"y":18,"x":14,"width":200,"height":32}],"blockCondition":[],"blockHeight":300,"autoOrder":true}],"customShader":"//======================================================================================================\n// SYSTEM START 该段注释由系统自动生成，请勿删改\n//======================================================================================================\n//------------------------------------------------------------------------------------------------------\n// 固定参数\n//------------------------------------------------------------------------------------------------------\n// varying vec2 v_texcoord; //  原始贴图UV坐标\n// uniform sampler2D texture; // 原始贴图\n// uniform float alpha; // 当前对象的透明度\n//------------------------------------------------------------------------------------------------------\n// 该材质的自定义参数 判定该变量存在的宏：MU材质编号_变量名称\n//------------------------------------------------------------------------------------------------------\n// uniform float mu3_strength; // MU3_strength 强度\n// uniform vec2 renderTargetSize; // 渲染对象尺寸信息 x=宽度 y=高度\n//------------------------------------------------------------------------------------------------------\n// shader 代码规则：\n// 1.由于多材质合并shader代码运行，函数名必须以mf${材质ID}_开头以避免函数名称冲突，如 mf3_myFunc\n// 2.入口函数vec4 mf${材质ID}_main 如 vec4 mf3_main(){return gl_FragColor;}\n// 3.原图采样：vec4 color = getTextureColor(v_texcoord);\n// 4.关于自定义贴图的坐标信息：自定义贴图可能是图集中的一部分，提供了相关信息（mu材质编号_变量名_UVInfo）\n//   相对于0~1的坐标系提供了图集的映射信息 vec4 [UV宽度缩放比例, UV高度缩放比例, UV水平偏移量, UV垂直偏移量]\n// 5.变量宏（可用于判定该变量是否满足出现条件）：#ifdef MU材质编号_变量名称、#else、#endif\n// 6.系统宏 IN_GC_EDITOR=是否在编辑器中运行\n// 7.语法：C语言 更多资料请参考GLSL Shader\n//======================================================================================================\n// SYSTEM END\n//======================================================================================================\nvec4 mf3_main(){\n   // 如果强度为0则直接返回\n   if(mu3_strength==0.0)return gl_FragColor;\n   // 周围NxN像素，以自己为中心 blurw越大则效果越好，但越消耗性能\n   const float blurw = 19.0;\n   float blurw10 = (blurw+1.0);\n   float blurw5 = blurw10/2.0;\n   float blurw100 = blurw10*blurw10;\n   float blurw50 =  blurw100/2.0;\n   float blurwP1 = 1.0/blurw100;\n   // 获取单位像素，并根据强度进行扩散\n   float dx = 1.0/renderTargetSize.x * mu3_strength/3.0; // 100=(blurw+1)^2\n   float dy = 1.0/renderTargetSize.y * mu3_strength/3.0; // 100=(blurw+1)^2\n   // \n   vec4 vec4Color = vec4(0.0,0.0,0.0,0.0);\n   float halfDx = dx * blurw50;\n   float halfDy = dy * blurw50;\n   // 起始坐标：当前坐标点 - N/2\n   vec2 startpos=vec2(v_texcoord.x-halfDx,v_texcoord.y-halfDy);\n   vec2 ctexcoord = startpos;\n   // 分摊的颜色\n   float pColorPer = blurwP1;\n   // 采样固定偏移\n   float fixDx = halfDx - dx*blurw5;\n   float fixDy = halfDy - dy*blurw5;\n   // 采样以自己为中心采样 N x N 像素进行混合\n   for(float y = 0.0;y<=blurw; ++y) {\n\t for(float x = 0.0;x<=blurw; ++x) {\n        ctexcoord.x = startpos.x + dx*x + fixDx;\n\t    ctexcoord.y = startpos.y + dy*y + fixDy;\n\t\tfloat xPer = (1.0-abs((x-blurw5)/blurw5));\n\t\tfloat yPer = (1.0-abs((y-blurw5)/blurw5));\n\t\tvec4Color += getTextureColor(ctexcoord)*pColorPer*xPer*yPer*4.0;\n\t }\n   }\n   vec4Color.a*=alpha;\n   return vec4Color;\n}","shaderSize":true},"4":{"id":4,"blockList":[{"name":"未命名块","blockAttrs":[{"attr":{"id":"47731136556_0.7744923850502541","varName":"color","varType":1,"compData":{"compType":12,"compParam":{"lowerLimit":0,"upperLimit":1000,"stepValue":0.01,"limitInteger":false,"lockTextLimit":false,"xDragEnabled":true,"yDragEnabled":true}},"defaultValue":"#00FF00","hideMode":false,"useCommand":false,"onlyPointTo":false,"moduleID":1,"dataStructureID":1,"arrayMode":false,"arrayLength":100,"arrayAllowDelete":false,"arrayAllowSwap":false,"arrayAllowUpdate":false,"accessMode":1,"syncMode":0,"attrTips":"","alias":"颜色","onlyConfig":false,"preview":false,"autoTitleWidth":true,"titleWidth":100,"eyeShow":true,"lockBlock":false},"attrConditions":[],"y":8,"x":5,"width":200,"height":32},{"attr":{"id":"48411944652_0.3848601090667927","varName":"blur","varType":0,"compData":{"compType":1,"compParam":{"minLimit":0,"maxLimit":10,"tickValue":0.01,"limitInteger":false,"lockTextLimit":false}},"defaultValue":"2","hideMode":false,"useCommand":false,"onlyPointTo":false,"moduleID":1,"dataStructureID":1,"arrayMode":false,"arrayLength":100,"arrayAllowDelete":false,"arrayAllowSwap":false,"arrayAllowUpdate":false,"accessMode":1,"syncMode":0,"attrTips":"","alias":"模糊度","onlyConfig":false,"preview":false,"autoTitleWidth":true,"titleWidth":100,"eyeShow":true,"lockBlock":false},"attrConditions":[],"y":45,"x":6,"width":200,"height":32},{"attr":{"id":"48411977732_0.6794017460797399","varName":"offsetX","varType":0,"compData":{"compType":0,"compParam":{}},"defaultValue":"0","hideMode":false,"useCommand":false,"onlyPointTo":false,"moduleID":1,"dataStructureID":1,"arrayMode":false,"arrayLength":100,"arrayAllowDelete":false,"arrayAllowSwap":false,"arrayAllowUpdate":false,"accessMode":1,"syncMode":0,"attrTips":"","alias":"水平偏移","onlyConfig":false,"preview":false,"autoTitleWidth":true,"titleWidth":100,"eyeShow":true,"lockBlock":false},"attrConditions":[],"y":80,"x":5,"width":200,"height":32},{"attr":{"id":"48411978101_0.7573082138255367","varName":"offsetY","varType":0,"compData":{"compType":0,"compParam":{}},"defaultValue":"0","hideMode":false,"useCommand":false,"onlyPointTo":false,"moduleID":1,"dataStructureID":1,"arrayMode":false,"arrayLength":100,"arrayAllowDelete":false,"arrayAllowSwap":false,"arrayAllowUpdate":false,"accessMode":1,"syncMode":0,"attrTips":"","alias":"垂直偏移","onlyConfig":false,"preview":false,"autoTitleWidth":true,"titleWidth":100,"eyeShow":true,"lockBlock":false},"attrConditions":[],"y":113,"x":6,"width":200,"height":32}],"blockCondition":[],"blockHeight":345,"autoOrder":true}],"customShader":"//======================================================================================================\n// SYSTEM START 该段注释由系统自动生成，请勿删改\n//======================================================================================================\n//------------------------------------------------------------------------------------------------------\n// 固定参数\n//------------------------------------------------------------------------------------------------------\n// varying vec2 v_texcoord; //  原始贴图UV坐标\n// uniform sampler2D texture; // 原始贴图\n// uniform float alpha; // 当前对象的透明度\n//------------------------------------------------------------------------------------------------------\n// 该材质的自定义参数 判定该变量存在的宏：MU材质编号_变量名称\n//------------------------------------------------------------------------------------------------------\n// uniform vec3 mu4_color; // MU4_color 颜色\n// uniform float mu4_blur; // MU4_blur 模糊度\n// uniform float mu4_offsetX; // MU4_offsetX 水平偏移\n// uniform float mu4_offsetY; // MU4_offsetY 垂直偏移\n// uniform vec2 renderTargetSize; // 渲染对象尺寸信息 x=宽度 y=高度\n//------------------------------------------------------------------------------------------------------\n// shader 代码规则：\n// 1.由于多材质合并shader代码运行，函数名必须以mf${材质ID}_开头以避免函数名称冲突，如 mf4_myFunc\n// 2.入口函数vec4 mf${材质ID}_main 如 vec4 mf4_main(){return gl_FragColor;}\n// 3.原图采样：vec4 color = getTextureColor(v_texcoord);\n// 4.关于自定义贴图的坐标信息：自定义贴图可能是图集中的一部分，提供了相关信息（mu材质编号_变量名_UVInfo）\n//   相对于0~1的坐标系提供了图集的映射信息 vec4 [UV宽度缩放比例, UV高度缩放比例, UV水平偏移量, UV垂直偏移量]\n// 5.变量宏（可用于判定该变量是否满足出现条件）：#ifdef MU材质编号_变量名称、#else、#endif\n// 6.系统宏 IN_GC_EDITOR=是否在编辑器中运行\n// 7.语法：C语言 更多资料请参考GLSL Shader\n//======================================================================================================\n// SYSTEM END\n//======================================================================================================\n\nvec4 mf4_main(){\n    float textW = renderTargetSize.x;\n\tfloat textH = renderTargetSize.y;\n\tfloat blurX = mu4_blur;\n\tfloat blurY = mu4_blur;\n\tfloat strength = 2.0;\n    const float c_IterationTime = 10.0;\n\tfloat floatIterationTotalTime = c_IterationTime * c_IterationTime;\n\tvec4 vec4Color = vec4(0.0,0.0,0.0,0.0);\n\tvec2 vec2FilterDir = vec2(-(mu4_offsetX)/textW,-(mu4_offsetY)/textH);\n\tvec2 vec2FilterOff = vec2(blurX/textW/c_IterationTime * 2.0,blurY/textH/c_IterationTime * 2.0);\n\tfloat maxNum = blurX * blurY;\n\tvec2 vec2Off = vec2(0.0,0.0);\n\tfloat floatOff = c_IterationTime/2.0;\n\tfor(float i = 0.0;i<=c_IterationTime; ++i){\n\t\t\tfor(float j = 0.0;j<=c_IterationTime; ++j){\n\t\t\t\tvec2Off = vec2(vec2FilterOff.x * (i - floatOff),vec2FilterOff.y * (j - floatOff));\n\t\t\t\tvec4Color += texture2D(texture, v_texcoord + vec2FilterDir + vec2Off)/floatIterationTotalTime;\n\t\t\t}\n\t}\n\tgl_FragColor = vec4(mu4_color.rgb,vec4Color.a * strength);\n\tgl_FragColor.rgb *= gl_FragColor.a;\n\n   vec4 colorOri = getTextureColor(v_texcoord);\n   if(colorOri.a>0.0){\n\t   gl_FragColor = colorOri;\n\t   gl_FragColor.a = colorOri.a;\n   }\n   gl_FragColor.a *= alpha;\n   return gl_FragColor;\n}","shaderSize":true}}}